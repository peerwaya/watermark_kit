// Autogenerated from Pigeon (v26.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.tttocklll.watermark_kit

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer
private object MessagesPigeonUtils {

  fun createConnectionError(channelName: String): FlutterError {
    return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")  }

  fun wrapResult(result: Any?): List<Any?> {
    return listOf(result)
  }

  fun wrapError(exception: Throwable): List<Any?> {
    return if (exception is FlutterError) {
      listOf(
        exception.code,
        exception.message,
        exception.details
      )
    } else {
      listOf(
        exception.javaClass.simpleName,
        exception.toString(),
        "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
      )
    }
  }
  fun deepEquals(a: Any?, b: Any?): Boolean {
    if (a is ByteArray && b is ByteArray) {
        return a.contentEquals(b)
    }
    if (a is IntArray && b is IntArray) {
        return a.contentEquals(b)
    }
    if (a is LongArray && b is LongArray) {
        return a.contentEquals(b)
    }
    if (a is DoubleArray && b is DoubleArray) {
        return a.contentEquals(b)
    }
    if (a is Array<*> && b is Array<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is List<*> && b is List<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is Map<*, *> && b is Map<*, *>) {
      return a.size == b.size && a.all {
          (b as Map<Any?, Any?>).containsKey(it.key) &&
          deepEquals(it.value, b[it.key])
      }
    }
    return a == b
  }
      
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class Anchor(val raw: Int) {
  TOP_LEFT(0),
  TOP_RIGHT(1),
  BOTTOM_LEFT(2),
  BOTTOM_RIGHT(3),
  CENTER(4);

  companion object {
    fun ofRaw(raw: Int): Anchor? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class OutputFormat(val raw: Int) {
  JPEG(0),
  PNG(1);

  companion object {
    fun ofRaw(raw: Int): OutputFormat? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class MeasureUnit(val raw: Int) {
  PX(0),
  PERCENT(1);

  companion object {
    fun ofRaw(raw: Int): MeasureUnit? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class VideoCodec(val raw: Int) {
  H264(0),
  HEVC(1);

  companion object {
    fun ofRaw(raw: Int): VideoCodec? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ComposeImageRequest (
  val baseImage: ByteArray,
  val watermarkImage: ByteArray,
  val anchor: Anchor,
  val margin: Double,
  val widthPercent: Double,
  val opacity: Double,
  val format: OutputFormat,
  val quality: Double,
  val offsetX: Double,
  val offsetY: Double,
  val marginUnit: MeasureUnit,
  val offsetUnit: MeasureUnit
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): ComposeImageRequest {
      val baseImage = pigeonVar_list[0] as ByteArray
      val watermarkImage = pigeonVar_list[1] as ByteArray
      val anchor = pigeonVar_list[2] as Anchor
      val margin = pigeonVar_list[3] as Double
      val widthPercent = pigeonVar_list[4] as Double
      val opacity = pigeonVar_list[5] as Double
      val format = pigeonVar_list[6] as OutputFormat
      val quality = pigeonVar_list[7] as Double
      val offsetX = pigeonVar_list[8] as Double
      val offsetY = pigeonVar_list[9] as Double
      val marginUnit = pigeonVar_list[10] as MeasureUnit
      val offsetUnit = pigeonVar_list[11] as MeasureUnit
      return ComposeImageRequest(baseImage, watermarkImage, anchor, margin, widthPercent, opacity, format, quality, offsetX, offsetY, marginUnit, offsetUnit)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      baseImage,
      watermarkImage,
      anchor,
      margin,
      widthPercent,
      opacity,
      format,
      quality,
      offsetX,
      offsetY,
      marginUnit,
      offsetUnit,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is ComposeImageRequest) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ComposeImageResult (
  val imageBytes: ByteArray,
  val width: Long,
  val height: Long
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): ComposeImageResult {
      val imageBytes = pigeonVar_list[0] as ByteArray
      val width = pigeonVar_list[1] as Long
      val height = pigeonVar_list[2] as Long
      return ComposeImageResult(imageBytes, width, height)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      imageBytes,
      width,
      height,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is ComposeImageResult) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class TextStyleDto (
  val fontFamily: String,
  val fontSizePt: Double,
  val fontWeight: Long,
  val colorArgb: Long
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): TextStyleDto {
      val fontFamily = pigeonVar_list[0] as String
      val fontSizePt = pigeonVar_list[1] as Double
      val fontWeight = pigeonVar_list[2] as Long
      val colorArgb = pigeonVar_list[3] as Long
      return TextStyleDto(fontFamily, fontSizePt, fontWeight, colorArgb)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      fontFamily,
      fontSizePt,
      fontWeight,
      colorArgb,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is TextStyleDto) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class WmStyleDto (
  val opacity: Double,
  val stroke: Boolean,
  val strokeWidth: Double,
  val shadowBlur: Double
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): WmStyleDto {
      val opacity = pigeonVar_list[0] as Double
      val stroke = pigeonVar_list[1] as Boolean
      val strokeWidth = pigeonVar_list[2] as Double
      val shadowBlur = pigeonVar_list[3] as Double
      return WmStyleDto(opacity, stroke, strokeWidth, shadowBlur)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      opacity,
      stroke,
      strokeWidth,
      shadowBlur,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is WmStyleDto) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ComposeTextRequest (
  val baseImage: ByteArray,
  val text: String,
  val anchor: Anchor,
  val margin: Double,
  val marginUnit: MeasureUnit,
  val offsetX: Double,
  val offsetY: Double,
  val offsetUnit: MeasureUnit,
  val widthPercent: Double,
  val textStyle: TextStyleDto,
  val style: WmStyleDto,
  val format: OutputFormat,
  val quality: Double
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): ComposeTextRequest {
      val baseImage = pigeonVar_list[0] as ByteArray
      val text = pigeonVar_list[1] as String
      val anchor = pigeonVar_list[2] as Anchor
      val margin = pigeonVar_list[3] as Double
      val marginUnit = pigeonVar_list[4] as MeasureUnit
      val offsetX = pigeonVar_list[5] as Double
      val offsetY = pigeonVar_list[6] as Double
      val offsetUnit = pigeonVar_list[7] as MeasureUnit
      val widthPercent = pigeonVar_list[8] as Double
      val textStyle = pigeonVar_list[9] as TextStyleDto
      val style = pigeonVar_list[10] as WmStyleDto
      val format = pigeonVar_list[11] as OutputFormat
      val quality = pigeonVar_list[12] as Double
      return ComposeTextRequest(baseImage, text, anchor, margin, marginUnit, offsetX, offsetY, offsetUnit, widthPercent, textStyle, style, format, quality)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      baseImage,
      text,
      anchor,
      margin,
      marginUnit,
      offsetX,
      offsetY,
      offsetUnit,
      widthPercent,
      textStyle,
      style,
      format,
      quality,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is ComposeTextRequest) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ComposeVideoRequest (
  val taskId: String? = null,
  val inputVideoPath: String,
  val outputVideoPath: String? = null,
  val watermarkImage: ByteArray? = null,
  val text: String? = null,
  val anchor: Anchor,
  val margin: Double,
  val marginUnit: MeasureUnit,
  val offsetX: Double,
  val offsetY: Double,
  val offsetUnit: MeasureUnit,
  val widthPercent: Double,
  val opacity: Double,
  val codec: VideoCodec,
  val bitrateBps: Long? = null,
  val maxFps: Double? = null,
  val maxLongSide: Long? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): ComposeVideoRequest {
      val taskId = pigeonVar_list[0] as String?
      val inputVideoPath = pigeonVar_list[1] as String
      val outputVideoPath = pigeonVar_list[2] as String?
      val watermarkImage = pigeonVar_list[3] as ByteArray?
      val text = pigeonVar_list[4] as String?
      val anchor = pigeonVar_list[5] as Anchor
      val margin = pigeonVar_list[6] as Double
      val marginUnit = pigeonVar_list[7] as MeasureUnit
      val offsetX = pigeonVar_list[8] as Double
      val offsetY = pigeonVar_list[9] as Double
      val offsetUnit = pigeonVar_list[10] as MeasureUnit
      val widthPercent = pigeonVar_list[11] as Double
      val opacity = pigeonVar_list[12] as Double
      val codec = pigeonVar_list[13] as VideoCodec
      val bitrateBps = pigeonVar_list[14] as Long?
      val maxFps = pigeonVar_list[15] as Double?
      val maxLongSide = pigeonVar_list[16] as Long?
      return ComposeVideoRequest(taskId, inputVideoPath, outputVideoPath, watermarkImage, text, anchor, margin, marginUnit, offsetX, offsetY, offsetUnit, widthPercent, opacity, codec, bitrateBps, maxFps, maxLongSide)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      taskId,
      inputVideoPath,
      outputVideoPath,
      watermarkImage,
      text,
      anchor,
      margin,
      marginUnit,
      offsetX,
      offsetY,
      offsetUnit,
      widthPercent,
      opacity,
      codec,
      bitrateBps,
      maxFps,
      maxLongSide,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is ComposeVideoRequest) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ComposeVideoResult (
  val taskId: String,
  val outputVideoPath: String,
  val width: Long,
  val height: Long,
  val durationMs: Long,
  val codec: VideoCodec
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): ComposeVideoResult {
      val taskId = pigeonVar_list[0] as String
      val outputVideoPath = pigeonVar_list[1] as String
      val width = pigeonVar_list[2] as Long
      val height = pigeonVar_list[3] as Long
      val durationMs = pigeonVar_list[4] as Long
      val codec = pigeonVar_list[5] as VideoCodec
      return ComposeVideoResult(taskId, outputVideoPath, width, height, durationMs, codec)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      taskId,
      outputVideoPath,
      width,
      height,
      durationMs,
      codec,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is ComposeVideoResult) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}
private open class MessagesPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          Anchor.ofRaw(it.toInt())
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          OutputFormat.ofRaw(it.toInt())
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          MeasureUnit.ofRaw(it.toInt())
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          VideoCodec.ofRaw(it.toInt())
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ComposeImageRequest.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ComposeImageResult.fromList(it)
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          TextStyleDto.fromList(it)
        }
      }
      136.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          WmStyleDto.fromList(it)
        }
      }
      137.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ComposeTextRequest.fromList(it)
        }
      }
      138.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ComposeVideoRequest.fromList(it)
        }
      }
      139.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ComposeVideoResult.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is Anchor -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is OutputFormat -> {
        stream.write(130)
        writeValue(stream, value.raw)
      }
      is MeasureUnit -> {
        stream.write(131)
        writeValue(stream, value.raw)
      }
      is VideoCodec -> {
        stream.write(132)
        writeValue(stream, value.raw)
      }
      is ComposeImageRequest -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is ComposeImageResult -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      is TextStyleDto -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      is WmStyleDto -> {
        stream.write(136)
        writeValue(stream, value.toList())
      }
      is ComposeTextRequest -> {
        stream.write(137)
        writeValue(stream, value.toList())
      }
      is ComposeVideoRequest -> {
        stream.write(138)
        writeValue(stream, value.toList())
      }
      is ComposeVideoResult -> {
        stream.write(139)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface WatermarkApi {
  fun composeImage(request: ComposeImageRequest, callback: (Result<ComposeImageResult>) -> Unit)
  fun composeText(request: ComposeTextRequest, callback: (Result<ComposeImageResult>) -> Unit)
  fun composeVideo(request: ComposeVideoRequest, callback: (Result<ComposeVideoResult>) -> Unit)
  fun cancel(taskId: String)

  companion object {
    /** The codec used by WatermarkApi. */
    val codec: MessageCodec<Any?> by lazy {
      MessagesPigeonCodec()
    }
    /** Sets up an instance of `WatermarkApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: WatermarkApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.watermark_kit.WatermarkApi.composeImage$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as ComposeImageRequest
            api.composeImage(requestArg) { result: Result<ComposeImageResult> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(MessagesPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(MessagesPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.watermark_kit.WatermarkApi.composeText$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as ComposeTextRequest
            api.composeText(requestArg) { result: Result<ComposeImageResult> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(MessagesPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(MessagesPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.watermark_kit.WatermarkApi.composeVideo$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as ComposeVideoRequest
            api.composeVideo(requestArg) { result: Result<ComposeVideoResult> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(MessagesPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(MessagesPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.watermark_kit.WatermarkApi.cancel$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val taskIdArg = args[0] as String
            val wrapped: List<Any?> = try {
              api.cancel(taskIdArg)
              listOf(null)
            } catch (exception: Throwable) {
              MessagesPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
class WatermarkCallbacks(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by WatermarkCallbacks. */
    val codec: MessageCodec<Any?> by lazy {
      MessagesPigeonCodec()
    }
  }
  fun onVideoProgress(taskIdArg: String, progressArg: Double, etaSecArg: Double, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.watermark_kit.WatermarkCallbacks.onVideoProgress$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(taskIdArg, progressArg, etaSecArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(MessagesPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun onVideoCompleted(resultArg: ComposeVideoResult, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.watermark_kit.WatermarkCallbacks.onVideoCompleted$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(resultArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(MessagesPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun onVideoError(taskIdArg: String, codeArg: String, messageArg: String, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.watermark_kit.WatermarkCallbacks.onVideoError$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(taskIdArg, codeArg, messageArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(MessagesPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
}
