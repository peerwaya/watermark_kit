// Autogenerated from Pigeon (v26.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}
bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed
        .every(((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]));
  }
  if (a is Map && b is Map) {
    return a.length == b.length && a.entries.every((MapEntry<Object?, Object?> entry) =>
        (b as Map<Object?, Object?>).containsKey(entry.key) &&
        _deepEquals(entry.value, b[entry.key]));
  }
  return a == b;
}


enum Anchor {
  topLeft,
  topRight,
  bottomLeft,
  bottomRight,
  center,
}

enum OutputFormat {
  jpeg,
  png,
}

class _Cfg {
  _Cfg();

  Object encode() {
    return <Object?>[];
  }

  static _Cfg decode(Object result) {
    return _Cfg();
  }
}

class ComposeImageRequest {
  ComposeImageRequest({
    required this.baseImage,
    required this.watermarkImage,
    this.anchor = Anchor.bottomRight,
    this.margin = 16.0,
    this.widthPercent = 0.18,
    this.opacity = 0.6,
    this.format = OutputFormat.jpeg,
    this.quality = 0.9,
  });

  Uint8List baseImage;

  Uint8List watermarkImage;

  Anchor anchor;

  double margin;

  double widthPercent;

  double opacity;

  OutputFormat format;

  double quality;

  List<Object?> _toList() {
    return <Object?>[
      baseImage,
      watermarkImage,
      anchor,
      margin,
      widthPercent,
      opacity,
      format,
      quality,
    ];
  }

  Object encode() {
    return _toList();  }

  static ComposeImageRequest decode(Object result) {
    result as List<Object?>;
    return ComposeImageRequest(
      baseImage: result[0]! as Uint8List,
      watermarkImage: result[1]! as Uint8List,
      anchor: result[2]! as Anchor,
      margin: result[3]! as double,
      widthPercent: result[4]! as double,
      opacity: result[5]! as double,
      format: result[6]! as OutputFormat,
      quality: result[7]! as double,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! ComposeImageRequest || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class ComposeImageResult {
  ComposeImageResult({
    required this.imageBytes,
    required this.width,
    required this.height,
  });

  Uint8List imageBytes;

  int width;

  int height;

  List<Object?> _toList() {
    return <Object?>[
      imageBytes,
      width,
      height,
    ];
  }

  Object encode() {
    return _toList();  }

  static ComposeImageResult decode(Object result) {
    result as List<Object?>;
    return ComposeImageResult(
      imageBytes: result[0]! as Uint8List,
      width: result[1]! as int,
      height: result[2]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! ComposeImageResult || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is Anchor) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    }    else if (value is OutputFormat) {
      buffer.putUint8(130);
      writeValue(buffer, value.index);
    }    else if (value is _Cfg) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    }    else if (value is ComposeImageRequest) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    }    else if (value is ComposeImageResult) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : Anchor.values[value];
      case 130: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : OutputFormat.values[value];
      case 131: 
        return _Cfg.decode(readValue(buffer)!);
      case 132: 
        return ComposeImageRequest.decode(readValue(buffer)!);
      case 133: 
        return ComposeImageResult.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class WatermarkApi {
  /// Constructor for [WatermarkApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  WatermarkApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<ComposeImageResult> composeImage(ComposeImageRequest request) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.watermark_kit.WatermarkApi.composeImage$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[request]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as ComposeImageResult?)!;
    }
  }
}
