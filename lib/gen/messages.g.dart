// Autogenerated from Pigeon (v26.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}
bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed
        .every(((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]));
  }
  if (a is Map && b is Map) {
    return a.length == b.length && a.entries.every((MapEntry<Object?, Object?> entry) =>
        (b as Map<Object?, Object?>).containsKey(entry.key) &&
        _deepEquals(entry.value, b[entry.key]));
  }
  return a == b;
}


enum Anchor {
  topLeft,
  topRight,
  bottomLeft,
  bottomRight,
  center,
}

enum OutputFormat {
  jpeg,
  png,
}

enum Unit {
  px,
  percent,
}

enum VideoCodec {
  h264,
  hevc,
}

class ComposeImageRequest {
  ComposeImageRequest({
    required this.baseImage,
    required this.watermarkImage,
    this.anchor = Anchor.bottomRight,
    this.margin = 16.0,
    this.widthPercent = 0.18,
    this.opacity = 0.6,
    this.format = OutputFormat.jpeg,
    this.quality = 0.9,
    this.offsetX = 0.0,
    this.offsetY = 0.0,
    this.marginUnit = Unit.px,
    this.offsetUnit = Unit.px,
  });

  Uint8List baseImage;

  Uint8List watermarkImage;

  Anchor anchor;

  double margin;

  double widthPercent;

  double opacity;

  OutputFormat format;

  double quality;

  double offsetX;

  double offsetY;

  Unit marginUnit;

  Unit offsetUnit;

  List<Object?> _toList() {
    return <Object?>[
      baseImage,
      watermarkImage,
      anchor,
      margin,
      widthPercent,
      opacity,
      format,
      quality,
      offsetX,
      offsetY,
      marginUnit,
      offsetUnit,
    ];
  }

  Object encode() {
    return _toList();  }

  static ComposeImageRequest decode(Object result) {
    result as List<Object?>;
    return ComposeImageRequest(
      baseImage: result[0]! as Uint8List,
      watermarkImage: result[1]! as Uint8List,
      anchor: result[2]! as Anchor,
      margin: result[3]! as double,
      widthPercent: result[4]! as double,
      opacity: result[5]! as double,
      format: result[6]! as OutputFormat,
      quality: result[7]! as double,
      offsetX: result[8]! as double,
      offsetY: result[9]! as double,
      marginUnit: result[10]! as Unit,
      offsetUnit: result[11]! as Unit,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! ComposeImageRequest || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class ComposeImageResult {
  ComposeImageResult({
    required this.imageBytes,
    required this.width,
    required this.height,
  });

  Uint8List imageBytes;

  int width;

  int height;

  List<Object?> _toList() {
    return <Object?>[
      imageBytes,
      width,
      height,
    ];
  }

  Object encode() {
    return _toList();  }

  static ComposeImageResult decode(Object result) {
    result as List<Object?>;
    return ComposeImageResult(
      imageBytes: result[0]! as Uint8List,
      width: result[1]! as int,
      height: result[2]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! ComposeImageResult || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class TextStyleDto {
  TextStyleDto({
    this.fontFamily = '.SFUI',
    this.fontSizePt = 24.0,
    this.fontWeight = 600,
    this.colorArgb = 0xFFFFFFFF,
  });

  String fontFamily;

  double fontSizePt;

  int fontWeight;

  int colorArgb;

  List<Object?> _toList() {
    return <Object?>[
      fontFamily,
      fontSizePt,
      fontWeight,
      colorArgb,
    ];
  }

  Object encode() {
    return _toList();  }

  static TextStyleDto decode(Object result) {
    result as List<Object?>;
    return TextStyleDto(
      fontFamily: result[0]! as String,
      fontSizePt: result[1]! as double,
      fontWeight: result[2]! as int,
      colorArgb: result[3]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! TextStyleDto || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class WmStyleDto {
  WmStyleDto({
    this.opacity = 0.6,
    this.stroke = false,
    this.strokeWidth = 1.0,
    this.shadowBlur = 0.0,
  });

  double opacity;

  bool stroke;

  double strokeWidth;

  double shadowBlur;

  List<Object?> _toList() {
    return <Object?>[
      opacity,
      stroke,
      strokeWidth,
      shadowBlur,
    ];
  }

  Object encode() {
    return _toList();  }

  static WmStyleDto decode(Object result) {
    result as List<Object?>;
    return WmStyleDto(
      opacity: result[0]! as double,
      stroke: result[1]! as bool,
      strokeWidth: result[2]! as double,
      shadowBlur: result[3]! as double,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! WmStyleDto || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class ComposeTextRequest {
  ComposeTextRequest({
    required this.baseImage,
    required this.text,
    this.anchor = Anchor.bottomRight,
    this.margin = 16.0,
    this.marginUnit = Unit.px,
    this.offsetX = 0.0,
    this.offsetY = 0.0,
    this.offsetUnit = Unit.px,
    this.widthPercent = 0.18,
    required this.textStyle,
    required this.style,
    this.format = OutputFormat.jpeg,
    this.quality = 0.9,
  });

  Uint8List baseImage;

  String text;

  Anchor anchor;

  double margin;

  Unit marginUnit;

  double offsetX;

  double offsetY;

  Unit offsetUnit;

  double widthPercent;

  TextStyleDto textStyle;

  WmStyleDto style;

  OutputFormat format;

  double quality;

  List<Object?> _toList() {
    return <Object?>[
      baseImage,
      text,
      anchor,
      margin,
      marginUnit,
      offsetX,
      offsetY,
      offsetUnit,
      widthPercent,
      textStyle,
      style,
      format,
      quality,
    ];
  }

  Object encode() {
    return _toList();  }

  static ComposeTextRequest decode(Object result) {
    result as List<Object?>;
    return ComposeTextRequest(
      baseImage: result[0]! as Uint8List,
      text: result[1]! as String,
      anchor: result[2]! as Anchor,
      margin: result[3]! as double,
      marginUnit: result[4]! as Unit,
      offsetX: result[5]! as double,
      offsetY: result[6]! as double,
      offsetUnit: result[7]! as Unit,
      widthPercent: result[8]! as double,
      textStyle: result[9]! as TextStyleDto,
      style: result[10]! as WmStyleDto,
      format: result[11]! as OutputFormat,
      quality: result[12]! as double,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! ComposeTextRequest || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class ComposeVideoRequest {
  ComposeVideoRequest({
    this.taskId,
    required this.inputVideoPath,
    this.outputVideoPath,
    this.watermarkImage,
    this.text,
    this.anchor = Anchor.bottomRight,
    this.margin = 16.0,
    this.marginUnit = Unit.px,
    this.offsetX = 0.0,
    this.offsetY = 0.0,
    this.offsetUnit = Unit.px,
    this.widthPercent = 0.18,
    this.opacity = 0.6,
    this.codec = VideoCodec.h264,
    this.bitrateBps,
    this.maxFps,
    this.maxLongSide,
  });

  String? taskId;

  String inputVideoPath;

  String? outputVideoPath;

  Uint8List? watermarkImage;

  String? text;

  Anchor anchor;

  double margin;

  Unit marginUnit;

  double offsetX;

  double offsetY;

  Unit offsetUnit;

  double widthPercent;

  double opacity;

  VideoCodec codec;

  int? bitrateBps;

  double? maxFps;

  int? maxLongSide;

  List<Object?> _toList() {
    return <Object?>[
      taskId,
      inputVideoPath,
      outputVideoPath,
      watermarkImage,
      text,
      anchor,
      margin,
      marginUnit,
      offsetX,
      offsetY,
      offsetUnit,
      widthPercent,
      opacity,
      codec,
      bitrateBps,
      maxFps,
      maxLongSide,
    ];
  }

  Object encode() {
    return _toList();  }

  static ComposeVideoRequest decode(Object result) {
    result as List<Object?>;
    return ComposeVideoRequest(
      taskId: result[0] as String?,
      inputVideoPath: result[1]! as String,
      outputVideoPath: result[2] as String?,
      watermarkImage: result[3] as Uint8List?,
      text: result[4] as String?,
      anchor: result[5]! as Anchor,
      margin: result[6]! as double,
      marginUnit: result[7]! as Unit,
      offsetX: result[8]! as double,
      offsetY: result[9]! as double,
      offsetUnit: result[10]! as Unit,
      widthPercent: result[11]! as double,
      opacity: result[12]! as double,
      codec: result[13]! as VideoCodec,
      bitrateBps: result[14] as int?,
      maxFps: result[15] as double?,
      maxLongSide: result[16] as int?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! ComposeVideoRequest || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class ComposeVideoResult {
  ComposeVideoResult({
    required this.taskId,
    required this.outputVideoPath,
    required this.width,
    required this.height,
    required this.durationMs,
    required this.codec,
  });

  String taskId;

  String outputVideoPath;

  int width;

  int height;

  int durationMs;

  VideoCodec codec;

  List<Object?> _toList() {
    return <Object?>[
      taskId,
      outputVideoPath,
      width,
      height,
      durationMs,
      codec,
    ];
  }

  Object encode() {
    return _toList();  }

  static ComposeVideoResult decode(Object result) {
    result as List<Object?>;
    return ComposeVideoResult(
      taskId: result[0]! as String,
      outputVideoPath: result[1]! as String,
      width: result[2]! as int,
      height: result[3]! as int,
      durationMs: result[4]! as int,
      codec: result[5]! as VideoCodec,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! ComposeVideoResult || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is Anchor) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    }    else if (value is OutputFormat) {
      buffer.putUint8(130);
      writeValue(buffer, value.index);
    }    else if (value is Unit) {
      buffer.putUint8(131);
      writeValue(buffer, value.index);
    }    else if (value is VideoCodec) {
      buffer.putUint8(132);
      writeValue(buffer, value.index);
    }    else if (value is ComposeImageRequest) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    }    else if (value is ComposeImageResult) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    }    else if (value is TextStyleDto) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    }    else if (value is WmStyleDto) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    }    else if (value is ComposeTextRequest) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    }    else if (value is ComposeVideoRequest) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    }    else if (value is ComposeVideoResult) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : Anchor.values[value];
      case 130: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : OutputFormat.values[value];
      case 131: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : Unit.values[value];
      case 132: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : VideoCodec.values[value];
      case 133: 
        return ComposeImageRequest.decode(readValue(buffer)!);
      case 134: 
        return ComposeImageResult.decode(readValue(buffer)!);
      case 135: 
        return TextStyleDto.decode(readValue(buffer)!);
      case 136: 
        return WmStyleDto.decode(readValue(buffer)!);
      case 137: 
        return ComposeTextRequest.decode(readValue(buffer)!);
      case 138: 
        return ComposeVideoRequest.decode(readValue(buffer)!);
      case 139: 
        return ComposeVideoResult.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class WatermarkApi {
  /// Constructor for [WatermarkApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  WatermarkApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<ComposeImageResult> composeImage(ComposeImageRequest request) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.watermark_kit.WatermarkApi.composeImage$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[request]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as ComposeImageResult?)!;
    }
  }

  Future<ComposeImageResult> composeText(ComposeTextRequest request) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.watermark_kit.WatermarkApi.composeText$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[request]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as ComposeImageResult?)!;
    }
  }

  Future<ComposeVideoResult> composeVideo(ComposeVideoRequest request) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.watermark_kit.WatermarkApi.composeVideo$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[request]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as ComposeVideoResult?)!;
    }
  }

  Future<void> cancel(String taskId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.watermark_kit.WatermarkApi.cancel$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[taskId]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}

abstract class WatermarkCallbacks {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  void onVideoProgress(String taskId, double progress, double etaSec);

  void onVideoCompleted(ComposeVideoResult result);

  void onVideoError(String taskId, String code, String message);

  static void setUp(WatermarkCallbacks? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.watermark_kit.WatermarkCallbacks.onVideoProgress$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.watermark_kit.WatermarkCallbacks.onVideoProgress was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_taskId = (args[0] as String?);
          assert(arg_taskId != null,
              'Argument for dev.flutter.pigeon.watermark_kit.WatermarkCallbacks.onVideoProgress was null, expected non-null String.');
          final double? arg_progress = (args[1] as double?);
          assert(arg_progress != null,
              'Argument for dev.flutter.pigeon.watermark_kit.WatermarkCallbacks.onVideoProgress was null, expected non-null double.');
          final double? arg_etaSec = (args[2] as double?);
          assert(arg_etaSec != null,
              'Argument for dev.flutter.pigeon.watermark_kit.WatermarkCallbacks.onVideoProgress was null, expected non-null double.');
          try {
            api.onVideoProgress(arg_taskId!, arg_progress!, arg_etaSec!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.watermark_kit.WatermarkCallbacks.onVideoCompleted$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.watermark_kit.WatermarkCallbacks.onVideoCompleted was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ComposeVideoResult? arg_result = (args[0] as ComposeVideoResult?);
          assert(arg_result != null,
              'Argument for dev.flutter.pigeon.watermark_kit.WatermarkCallbacks.onVideoCompleted was null, expected non-null ComposeVideoResult.');
          try {
            api.onVideoCompleted(arg_result!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.watermark_kit.WatermarkCallbacks.onVideoError$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.watermark_kit.WatermarkCallbacks.onVideoError was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_taskId = (args[0] as String?);
          assert(arg_taskId != null,
              'Argument for dev.flutter.pigeon.watermark_kit.WatermarkCallbacks.onVideoError was null, expected non-null String.');
          final String? arg_code = (args[1] as String?);
          assert(arg_code != null,
              'Argument for dev.flutter.pigeon.watermark_kit.WatermarkCallbacks.onVideoError was null, expected non-null String.');
          final String? arg_message = (args[2] as String?);
          assert(arg_message != null,
              'Argument for dev.flutter.pigeon.watermark_kit.WatermarkCallbacks.onVideoError was null, expected non-null String.');
          try {
            api.onVideoError(arg_taskId!, arg_code!, arg_message!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
