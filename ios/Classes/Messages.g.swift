// Autogenerated from Pigeon (v26.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

func deepEqualsMessages(_ lhs: Any?, _ rhs: Any?) -> Bool {
  let cleanLhs = nilOrValue(lhs) as Any?
  let cleanRhs = nilOrValue(rhs) as Any?
  switch (cleanLhs, cleanRhs) {
  case (nil, nil):
    return true

  case (nil, _), (_, nil):
    return false

  case is (Void, Void):
    return true

  case let (cleanLhsHashable, cleanRhsHashable) as (AnyHashable, AnyHashable):
    return cleanLhsHashable == cleanRhsHashable

  case let (cleanLhsArray, cleanRhsArray) as ([Any?], [Any?]):
    guard cleanLhsArray.count == cleanRhsArray.count else { return false }
    for (index, element) in cleanLhsArray.enumerated() {
      if !deepEqualsMessages(element, cleanRhsArray[index]) {
        return false
      }
    }
    return true

  case let (cleanLhsDictionary, cleanRhsDictionary) as ([AnyHashable: Any?], [AnyHashable: Any?]):
    guard cleanLhsDictionary.count == cleanRhsDictionary.count else { return false }
    for (key, cleanLhsValue) in cleanLhsDictionary {
      guard cleanRhsDictionary.index(forKey: key) != nil else { return false }
      if !deepEqualsMessages(cleanLhsValue, cleanRhsDictionary[key]!) {
        return false
      }
    }
    return true

  default:
    // Any other type shouldn't be able to be used with pigeon. File an issue if you find this to be untrue.
    return false
  }
}

func deepHashMessages(value: Any?, hasher: inout Hasher) {
  if let valueList = value as? [AnyHashable] {
     for item in valueList { deepHashMessages(value: item, hasher: &hasher) }
     return
  }

  if let valueDict = value as? [AnyHashable: AnyHashable] {
    for key in valueDict.keys { 
      hasher.combine(key)
      deepHashMessages(value: valueDict[key]!, hasher: &hasher)
    }
    return
  }

  if let hashableValue = value as? AnyHashable {
    hasher.combine(hashableValue.hashValue)
  }

  return hasher.combine(String(describing: value))
}

    

enum Anchor: Int {
  case topLeft = 0
  case topRight = 1
  case bottomLeft = 2
  case bottomRight = 3
  case center = 4
}

enum OutputFormat: Int {
  case jpeg = 0
  case png = 1
}

enum MeasureUnit: Int {
  case px = 0
  case percent = 1
}

enum VideoCodec: Int {
  case h264 = 0
  case hevc = 1
}

/// Generated class from Pigeon that represents data sent in messages.
struct ComposeImageRequest: Hashable {
  var baseImage: FlutterStandardTypedData
  var watermarkImage: FlutterStandardTypedData
  var anchor: Anchor
  var margin: Double
  var widthPercent: Double
  var opacity: Double
  var format: OutputFormat
  var quality: Double
  var offsetX: Double
  var offsetY: Double
  var marginUnit: MeasureUnit
  var offsetUnit: MeasureUnit


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ComposeImageRequest? {
    let baseImage = pigeonVar_list[0] as! FlutterStandardTypedData
    let watermarkImage = pigeonVar_list[1] as! FlutterStandardTypedData
    let anchor = pigeonVar_list[2] as! Anchor
    let margin = pigeonVar_list[3] as! Double
    let widthPercent = pigeonVar_list[4] as! Double
    let opacity = pigeonVar_list[5] as! Double
    let format = pigeonVar_list[6] as! OutputFormat
    let quality = pigeonVar_list[7] as! Double
    let offsetX = pigeonVar_list[8] as! Double
    let offsetY = pigeonVar_list[9] as! Double
    let marginUnit = pigeonVar_list[10] as! MeasureUnit
    let offsetUnit = pigeonVar_list[11] as! MeasureUnit

    return ComposeImageRequest(
      baseImage: baseImage,
      watermarkImage: watermarkImage,
      anchor: anchor,
      margin: margin,
      widthPercent: widthPercent,
      opacity: opacity,
      format: format,
      quality: quality,
      offsetX: offsetX,
      offsetY: offsetY,
      marginUnit: marginUnit,
      offsetUnit: offsetUnit
    )
  }
  func toList() -> [Any?] {
    return [
      baseImage,
      watermarkImage,
      anchor,
      margin,
      widthPercent,
      opacity,
      format,
      quality,
      offsetX,
      offsetY,
      marginUnit,
      offsetUnit,
    ]
  }
  static func == (lhs: ComposeImageRequest, rhs: ComposeImageRequest) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ComposeImageResult: Hashable {
  var imageBytes: FlutterStandardTypedData
  var width: Int64
  var height: Int64


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ComposeImageResult? {
    let imageBytes = pigeonVar_list[0] as! FlutterStandardTypedData
    let width = pigeonVar_list[1] as! Int64
    let height = pigeonVar_list[2] as! Int64

    return ComposeImageResult(
      imageBytes: imageBytes,
      width: width,
      height: height
    )
  }
  func toList() -> [Any?] {
    return [
      imageBytes,
      width,
      height,
    ]
  }
  static func == (lhs: ComposeImageResult, rhs: ComposeImageResult) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct TextStyleDto: Hashable {
  var fontFamily: String
  var fontSizePt: Double
  var fontWeight: Int64
  var colorArgb: Int64


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> TextStyleDto? {
    let fontFamily = pigeonVar_list[0] as! String
    let fontSizePt = pigeonVar_list[1] as! Double
    let fontWeight = pigeonVar_list[2] as! Int64
    let colorArgb = pigeonVar_list[3] as! Int64

    return TextStyleDto(
      fontFamily: fontFamily,
      fontSizePt: fontSizePt,
      fontWeight: fontWeight,
      colorArgb: colorArgb
    )
  }
  func toList() -> [Any?] {
    return [
      fontFamily,
      fontSizePt,
      fontWeight,
      colorArgb,
    ]
  }
  static func == (lhs: TextStyleDto, rhs: TextStyleDto) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct WmStyleDto: Hashable {
  var opacity: Double
  var stroke: Bool
  var strokeWidth: Double
  var shadowBlur: Double


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> WmStyleDto? {
    let opacity = pigeonVar_list[0] as! Double
    let stroke = pigeonVar_list[1] as! Bool
    let strokeWidth = pigeonVar_list[2] as! Double
    let shadowBlur = pigeonVar_list[3] as! Double

    return WmStyleDto(
      opacity: opacity,
      stroke: stroke,
      strokeWidth: strokeWidth,
      shadowBlur: shadowBlur
    )
  }
  func toList() -> [Any?] {
    return [
      opacity,
      stroke,
      strokeWidth,
      shadowBlur,
    ]
  }
  static func == (lhs: WmStyleDto, rhs: WmStyleDto) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ComposeTextRequest: Hashable {
  var baseImage: FlutterStandardTypedData
  var text: String
  var anchor: Anchor
  var margin: Double
  var marginUnit: MeasureUnit
  var offsetX: Double
  var offsetY: Double
  var offsetUnit: MeasureUnit
  var widthPercent: Double
  var textStyle: TextStyleDto
  var style: WmStyleDto
  var format: OutputFormat
  var quality: Double


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ComposeTextRequest? {
    let baseImage = pigeonVar_list[0] as! FlutterStandardTypedData
    let text = pigeonVar_list[1] as! String
    let anchor = pigeonVar_list[2] as! Anchor
    let margin = pigeonVar_list[3] as! Double
    let marginUnit = pigeonVar_list[4] as! MeasureUnit
    let offsetX = pigeonVar_list[5] as! Double
    let offsetY = pigeonVar_list[6] as! Double
    let offsetUnit = pigeonVar_list[7] as! MeasureUnit
    let widthPercent = pigeonVar_list[8] as! Double
    let textStyle = pigeonVar_list[9] as! TextStyleDto
    let style = pigeonVar_list[10] as! WmStyleDto
    let format = pigeonVar_list[11] as! OutputFormat
    let quality = pigeonVar_list[12] as! Double

    return ComposeTextRequest(
      baseImage: baseImage,
      text: text,
      anchor: anchor,
      margin: margin,
      marginUnit: marginUnit,
      offsetX: offsetX,
      offsetY: offsetY,
      offsetUnit: offsetUnit,
      widthPercent: widthPercent,
      textStyle: textStyle,
      style: style,
      format: format,
      quality: quality
    )
  }
  func toList() -> [Any?] {
    return [
      baseImage,
      text,
      anchor,
      margin,
      marginUnit,
      offsetX,
      offsetY,
      offsetUnit,
      widthPercent,
      textStyle,
      style,
      format,
      quality,
    ]
  }
  static func == (lhs: ComposeTextRequest, rhs: ComposeTextRequest) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ComposeVideoRequest: Hashable {
  var taskId: String? = nil
  var inputVideoPath: String
  var outputVideoPath: String? = nil
  var watermarkImage: FlutterStandardTypedData? = nil
  var text: String? = nil
  var anchor: Anchor
  var margin: Double
  var marginUnit: MeasureUnit
  var offsetX: Double
  var offsetY: Double
  var offsetUnit: MeasureUnit
  var widthPercent: Double
  var opacity: Double
  var codec: VideoCodec
  var bitrateBps: Int64? = nil
  var maxFps: Double? = nil
  var maxLongSide: Int64? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ComposeVideoRequest? {
    let taskId: String? = nilOrValue(pigeonVar_list[0])
    let inputVideoPath = pigeonVar_list[1] as! String
    let outputVideoPath: String? = nilOrValue(pigeonVar_list[2])
    let watermarkImage: FlutterStandardTypedData? = nilOrValue(pigeonVar_list[3])
    let text: String? = nilOrValue(pigeonVar_list[4])
    let anchor = pigeonVar_list[5] as! Anchor
    let margin = pigeonVar_list[6] as! Double
    let marginUnit = pigeonVar_list[7] as! MeasureUnit
    let offsetX = pigeonVar_list[8] as! Double
    let offsetY = pigeonVar_list[9] as! Double
    let offsetUnit = pigeonVar_list[10] as! MeasureUnit
    let widthPercent = pigeonVar_list[11] as! Double
    let opacity = pigeonVar_list[12] as! Double
    let codec = pigeonVar_list[13] as! VideoCodec
    let bitrateBps: Int64? = nilOrValue(pigeonVar_list[14])
    let maxFps: Double? = nilOrValue(pigeonVar_list[15])
    let maxLongSide: Int64? = nilOrValue(pigeonVar_list[16])

    return ComposeVideoRequest(
      taskId: taskId,
      inputVideoPath: inputVideoPath,
      outputVideoPath: outputVideoPath,
      watermarkImage: watermarkImage,
      text: text,
      anchor: anchor,
      margin: margin,
      marginUnit: marginUnit,
      offsetX: offsetX,
      offsetY: offsetY,
      offsetUnit: offsetUnit,
      widthPercent: widthPercent,
      opacity: opacity,
      codec: codec,
      bitrateBps: bitrateBps,
      maxFps: maxFps,
      maxLongSide: maxLongSide
    )
  }
  func toList() -> [Any?] {
    return [
      taskId,
      inputVideoPath,
      outputVideoPath,
      watermarkImage,
      text,
      anchor,
      margin,
      marginUnit,
      offsetX,
      offsetY,
      offsetUnit,
      widthPercent,
      opacity,
      codec,
      bitrateBps,
      maxFps,
      maxLongSide,
    ]
  }
  static func == (lhs: ComposeVideoRequest, rhs: ComposeVideoRequest) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ComposeVideoResult: Hashable {
  var taskId: String
  var outputVideoPath: String
  var width: Int64
  var height: Int64
  var durationMs: Int64
  var codec: VideoCodec


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ComposeVideoResult? {
    let taskId = pigeonVar_list[0] as! String
    let outputVideoPath = pigeonVar_list[1] as! String
    let width = pigeonVar_list[2] as! Int64
    let height = pigeonVar_list[3] as! Int64
    let durationMs = pigeonVar_list[4] as! Int64
    let codec = pigeonVar_list[5] as! VideoCodec

    return ComposeVideoResult(
      taskId: taskId,
      outputVideoPath: outputVideoPath,
      width: width,
      height: height,
      durationMs: durationMs,
      codec: codec
    )
  }
  func toList() -> [Any?] {
    return [
      taskId,
      outputVideoPath,
      width,
      height,
      durationMs,
      codec,
    ]
  }
  static func == (lhs: ComposeVideoResult, rhs: ComposeVideoResult) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

private class MessagesPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return Anchor(rawValue: enumResultAsInt)
      }
      return nil
    case 130:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return OutputFormat(rawValue: enumResultAsInt)
      }
      return nil
    case 131:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return MeasureUnit(rawValue: enumResultAsInt)
      }
      return nil
    case 132:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return VideoCodec(rawValue: enumResultAsInt)
      }
      return nil
    case 133:
      return ComposeImageRequest.fromList(self.readValue() as! [Any?])
    case 134:
      return ComposeImageResult.fromList(self.readValue() as! [Any?])
    case 135:
      return TextStyleDto.fromList(self.readValue() as! [Any?])
    case 136:
      return WmStyleDto.fromList(self.readValue() as! [Any?])
    case 137:
      return ComposeTextRequest.fromList(self.readValue() as! [Any?])
    case 138:
      return ComposeVideoRequest.fromList(self.readValue() as! [Any?])
    case 139:
      return ComposeVideoResult.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class MessagesPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? Anchor {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else if let value = value as? OutputFormat {
      super.writeByte(130)
      super.writeValue(value.rawValue)
    } else if let value = value as? MeasureUnit {
      super.writeByte(131)
      super.writeValue(value.rawValue)
    } else if let value = value as? VideoCodec {
      super.writeByte(132)
      super.writeValue(value.rawValue)
    } else if let value = value as? ComposeImageRequest {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? ComposeImageResult {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else if let value = value as? TextStyleDto {
      super.writeByte(135)
      super.writeValue(value.toList())
    } else if let value = value as? WmStyleDto {
      super.writeByte(136)
      super.writeValue(value.toList())
    } else if let value = value as? ComposeTextRequest {
      super.writeByte(137)
      super.writeValue(value.toList())
    } else if let value = value as? ComposeVideoRequest {
      super.writeByte(138)
      super.writeValue(value.toList())
    } else if let value = value as? ComposeVideoResult {
      super.writeByte(139)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class MessagesPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return MessagesPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return MessagesPigeonCodecWriter(data: data)
  }
}

class MessagesPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = MessagesPigeonCodec(readerWriter: MessagesPigeonCodecReaderWriter())
}


/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol WatermarkApi {
  func composeImage(request: ComposeImageRequest, completion: @escaping (Result<ComposeImageResult, Error>) -> Void)
  func composeText(request: ComposeTextRequest, completion: @escaping (Result<ComposeImageResult, Error>) -> Void)
  func composeVideo(request: ComposeVideoRequest, completion: @escaping (Result<ComposeVideoResult, Error>) -> Void)
  func cancel(taskId: String) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class WatermarkApiSetup {
  static var codec: FlutterStandardMessageCodec { MessagesPigeonCodec.shared }
  /// Sets up an instance of `WatermarkApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: WatermarkApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let composeImageChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.watermark_kit.WatermarkApi.composeImage\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      composeImageChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let requestArg = args[0] as! ComposeImageRequest
        api.composeImage(request: requestArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      composeImageChannel.setMessageHandler(nil)
    }
    let composeTextChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.watermark_kit.WatermarkApi.composeText\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      composeTextChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let requestArg = args[0] as! ComposeTextRequest
        api.composeText(request: requestArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      composeTextChannel.setMessageHandler(nil)
    }
    let composeVideoChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.watermark_kit.WatermarkApi.composeVideo\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      composeVideoChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let requestArg = args[0] as! ComposeVideoRequest
        api.composeVideo(request: requestArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      composeVideoChannel.setMessageHandler(nil)
    }
    let cancelChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.watermark_kit.WatermarkApi.cancel\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      cancelChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let taskIdArg = args[0] as! String
        do {
          try api.cancel(taskId: taskIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      cancelChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol WatermarkCallbacksProtocol {
  func onVideoProgress(taskId taskIdArg: String, progress progressArg: Double, etaSec etaSecArg: Double, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onVideoCompleted(result resultArg: ComposeVideoResult, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onVideoError(taskId taskIdArg: String, code codeArg: String, message messageArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class WatermarkCallbacks: WatermarkCallbacksProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: MessagesPigeonCodec {
    return MessagesPigeonCodec.shared
  }
  func onVideoProgress(taskId taskIdArg: String, progress progressArg: Double, etaSec etaSecArg: Double, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.watermark_kit.WatermarkCallbacks.onVideoProgress\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([taskIdArg, progressArg, etaSecArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onVideoCompleted(result resultArg: ComposeVideoResult, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.watermark_kit.WatermarkCallbacks.onVideoCompleted\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([resultArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onVideoError(taskId taskIdArg: String, code codeArg: String, message messageArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.watermark_kit.WatermarkCallbacks.onVideoError\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([taskIdArg, codeArg, messageArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
}
